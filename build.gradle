// Gradle plugins - these add extra Gradle tasks and lets us extend Gradle's capabilities
plugins {
    // Allows us to use Java
    id 'java'
    // Allows us to do code coverage
    id 'jacoco'
    // Allows us to use Lombok helper annotations
    id 'io.freefair.lombok' version '6.6.3'
    // Allows us to use Sonarqube code quality scans
    id 'org.sonarqube' version '4.0.0.2929'
    // Allows use to Lint our code and specify the code style rules we want to enforce
    // id 'checkstyle'
    // Allows us to publish our code coverage so it can appear in a badge on our Github Repo
    id 'com.github.kt3k.coveralls' version '2.12.2'
    // Allows us to run `./gradlew dependencyUpdates` to check for dependency updates
    // https://github.com/ben-manes/gradle-versions-plugin
    id 'com.github.ben-manes.versions' version '0.46.0'

    // Uncomment plugin below to check for unused dependencies
    // Allows us to run `./gradlew buildHealth` to check for unused dependencies
    // https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin
//    id 'com.autonomousapps.dependency-analysis' version '1.0.0-rc06'
}

// Project Settings
group = 'com.smartsheet'
version = '3.0.1'
sourceCompatibility = '11'

// Variables to expose
ext {
    httpClientVersion = '4.5.13'
    slf4jVersion = '1.7.25'
    jacksonCoreVersion = '2.9.10'
    jacksonDatabindVersion = '2.9.10.8'
    httpMimeVersion = '4.5'
    okHttpVersion = '4.0.0'
    slf4jSimpleVersion = '1.7.25'
    mockitoCoreVersion = '5.1.1'
    mockitoJUnitJupiterVersion = '5.1.1'
    jUnitJupiterVersion = '5.5.1'
    jettyServerVersion = '9.4.41.v20210516'
    commonsIoVersion = '2.7'
    assertJVersion = '3.24.2'
    jacocoVersion = '0.8.10'
}

// Tell Gradle where to pull dependencies from
repositories {
    mavenCentral()
}

// Libraries we need to import
dependencies {
    // Compile dependencies (dependencies needed to run the lib)
    implementation "org.apache.httpcomponents:httpclient:${httpClientVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    implementation "org.apache.httpcomponents:httpmime:${httpMimeVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"

    // Test Dependencies
    testImplementation "org.slf4j:slf4j-simple:${slf4jSimpleVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJUnitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${jUnitJupiterVersion}"
    testImplementation "org.eclipse.jetty:jetty-server:${jettyServerVersion}"
    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
}

javadoc {
    source = sourceSets.main.allJava
}

task sdkTest(type: Test) {
    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()

    filter {
        includeTestsMatching "com.smartsheet.api.sdk_test.*"
    }

    testClassesDirs = sourceSets.test.output
    classpath = sourceSets.test.runtimeClasspath
}

// Task to run the integration tests
task integrationTest(type: Test) {
    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()

    filter {
        includeTestsMatching "*.*IT"
    }

    testClassesDirs = sourceSets.test.output
    classpath = sourceSets.test.runtimeClasspath
}

// Make sure that all test tasks are ran when we run `./gradlew clean build` (check task runs as part of that)
tasks.named('check') {
    dependsOn 'integrationTest'
    dependsOn 'sdkTest'
}


// Test Configuration
test {
    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()

    filter {
        // exclude SDK Tests and integration tests
        excludeTestsMatching "*.*IT"
        excludeTestsMatching "com.smartsheet.api.sdk_test.*"
    }

    jacoco {
        // files to exclude from code coverage
        excludes = []
    }

    reports {
        // test reports to include
        junitXml.required = true
        html.required = true
    }
}

// Jacoco (Java Code Coverage) Configuration
jacoco {
    toolVersion = "${jacocoVersion}"
}

// Configuration for our code coverage report
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

//// Sonarqube Configuration
//sonarqube {
//    // system properties are defined in gradle.properties
//    properties {
//        property "sonar.sourceEncoding", "UTF-8"
//        property "sonar.projectKey", "smartsheet-sdk-java"
//        property "sonar.exclusions", [] // files to exclude from SonarQube analysis
//        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
//    }
//}
//
//// Checkstyle Configuration
//checkstyle {
//    toolVersion = "${checkstyleVersion}"
//    configFile = file('config/checkstyle/checkstyle-custom.xml')
//}
