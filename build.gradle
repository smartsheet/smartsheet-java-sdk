// Gradle plugins - these add extra Gradle tasks and lets us extend Gradle's capabilities
plugins {
    // ** COMPILATION PLUGINS **
    // Allows us to use Java
    id 'java'
    // Allows us to use Lombok helper annotations
    id 'io.freefair.lombok' version '6.6.3'

    // ** CODE QUALITY PLUGINS **
    // Allows us to do code coverage
    id 'jacoco'
    // Allows use to Lint our code and specify the code style rules we want to enforce
    id 'checkstyle'
    // Allows us to publish our code coverage so it can appear in a badge on our Github Repo
    id 'com.github.kt3k.coveralls' version '2.12.2'

    // ** PUBLISHING PLUGINS **
    // Allows us to sign our artifacts so that user's know it's from us
    id 'signing'
    // Allows us to publish our artifact
    id 'maven-publish'
    // Allows us to publish to https://oss.sonatype.org/ and release our artifact
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'

    //** TESTING PLUGINS
    // Allow a test to be retried a specified number of times... this is for the flaky integration tests unfortunately
    id 'org.gradle.test-retry' version '1.5.8'

    // ** MAINTENANCE PLUGINS **
    // Allows us to run `./gradlew dependencyUpdates` to check for dependency updates
    // https://github.com/ben-manes/gradle-versions-plugin
    id 'com.github.ben-manes.versions' version '0.46.0'
    // Uncomment plugin below to check for unused dependencies
    // Allows us to run `./gradlew buildHealth` to check for unused dependencies
    // https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin
//    id 'com.autonomousapps.dependency-analysis' version '1.0.0-rc06'
}

// Project Settings
// =============================================
// The group name. This dictates the prefix our dependency will have once it's published.
group = 'com.smartsheet'
// The version. This will be added to the end of the Jar and all other resources that are created during the build.
version = '3.2.0'
// The Java version:
sourceCompatibility = '11'

// Variables to expose. This is mainly for having a convenient place to store/view dependency versions.
ext {
    assertJVersion = '3.24.2'
    checkstyleVersion = '10.12.1'
    commonsIoVersion = '2.7'
    httpClientVersion = '4.5.13'
    httpMimeVersion = '4.5'
    jacksonCoreVersion = '2.9.10'
    jacksonDatabindVersion = '2.9.10.8'
    jacocoVersion = '0.8.10'
    jettyServerVersion = '9.4.41.v20210516'
    jUnitJupiterVersion = '5.5.1'
    mockitoCoreVersion = '5.1.1'
    mockitoJUnitJupiterVersion = '5.1.1'
    okHttpVersion = '4.0.0'
    slf4jSimpleVersion = '1.7.25'
    slf4jVersion = '1.7.25'
}

// Tell Gradle where to download dependencies from
repositories {
    mavenCentral()
}

// Libraries we need to import to build/test our code
dependencies {
    // Compile dependencies (dependencies needed to run the lib)
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    implementation "org.apache.httpcomponents:httpclient:${httpClientVersion}"
    implementation "org.apache.httpcomponents:httpmime:${httpMimeVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    // Test Dependencies
    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.eclipse.jetty:jetty-server:${jettyServerVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${jUnitJupiterVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJUnitJupiterVersion}"
    testImplementation "org.slf4j:slf4j-simple:${slf4jSimpleVersion}"
}

// Configuration for our Javadocs
javadoc {
    // Exclude any javadocs from our internal implementations
    exclude "com/smartsheet/api/internal/**"
    // Only include javadocs from `main` (don't include test javadocs)
    source = sourceSets.main.allJava
}

// Task to run the SDK tests
tasks.register('sdkTest', Test) {
    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()

    // We only want to run tests in the specified package
    filter {
        includeTestsMatching "com.smartsheet.api.sdktest.*"
    }

    testLogging {
        // Log tests ran since there so few and they run so fast
        events "PASSED", "SKIPPED", "FAILED"
        // Log the full exception so we can see why tests failed
        exceptionFormat = 'full'
    }

    testClassesDirs = sourceSets.test.output
    classpath = sourceSets.test.runtimeClasspath
}

// Task to run the integration tests
tasks.register('integrationTest', Test) {
    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()

    // Sadly, some of the tests are flaky so we want to automatically retry them
    retry {
        // How many times we will retry a failing test
        maxRetries = 5
        // The limit of tests that can fail. If more than this limit fail, then we won't do any reruns
        maxFailures = 3
    }

    // We only want to run tests in files ending with IT.java
    filter {
        includeTestsMatching "com.smartsheet.api.integrationtest.*"
    }

    testLogging {
        // Log tests ran since there so few and they run so fast
        events "PASSED", "SKIPPED", "FAILED"
        // Log the full exception so we can see why tests failed
        exceptionFormat = 'full'
    }

    testClassesDirs = sourceSets.test.output
    classpath = sourceSets.test.runtimeClasspath
}


// Test Configuration
test {
    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()

    // exclude SDK Tests and integration tests
    filter {
        excludeTestsMatching "com.smartsheet.api.integrationtest.*"
        excludeTestsMatching "com.smartsheet.api.sdktest.*"
    }

    testLogging {
        // Log the full exception so we can see why tests failed
        exceptionFormat = 'full'
    }

    // Code Coverage settings for tests
    jacoco {
        // files to exclude from code coverage
        excludes = []
    }

    // We Junit to produce the following test reports
    reports {
        // test reports to include
        junitXml.required = true
        html.required = true
    }
}

// Jacoco (Java Code Coverage) Configuration
jacoco {
    toolVersion = "${jacocoVersion}"
}

// Configuration for our code coverage report
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

// Configuration for the extra Jars we would like to produce
java {
    // Produce a Javadoc Jar so people can understand what our code does
    withJavadocJar()
    // Produce a Sources Jar so people that use our library can analyze our code
    withSourcesJar()
}

// Configuration for how we want to publish our Jar to Maven Central
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // Details that will be included in our published POM file
            pom {
                name = 'Smartsheet Java SDK'
                description = 'Library for connecting to Smartsheet Services'
                url = 'https://github.com/smartsheet/smartsheet-java-sdk'
                organization {
                    name = 'Smartsheet'
                    url = 'https://smartsheet.com'
                }
                inceptionYear = '2014'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'support'
                        name = 'Smartsheet Support'
                        email = 'api@smartsheet.com'
                        organization = 'Smartsheet'
			            organizationUrl = 'https://www.smartsheet.com'
			            timezone = 'America/Los_Angeles'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:smartsheet/java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:smartsheet/java-sdk.git'
                    url = 'git@github.com:smartsheet/java-sdk.git'
                }
            }
        }
    }

}

// The credentials for us to publish to https://oss.sonatype.org/ and release our artifact
nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }
}

// Configuration for how we want to sign our Jar files. This is how Maven Central will know we are who we say we are when publishing.
signing {
    // We will have the gpg-agent on the GitHub runner, so we want to use that key to sign
    // Link: https://docs.gradle.org/current/userguide/signing_plugin.html#sec:using_gpg_agent
    useGpgCmd()
    // Specify that we want to sign our publications
    sign publishing.publications.mavenJava
}

// Checkstyle Configuration
checkstyle {
    toolVersion = "${checkstyleVersion}"
    configFile = file('config/checkstyle/checkstyle-custom.xml')
}

// Override configuration for Checkstyle that runs on our 'src/main' package
checkstyleMain {
    // Since our main classes still have some outstanding checkstyle violations, we can allow up to 20 errors so we don't fail on the
    // existing violations, but will fail if we add any new ones. We do not allow _any_ violations in test files.
    maxErrors = 5
}
